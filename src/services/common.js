import { MEDIUM_TERM } from 'definitions';

const API_URL = process.env.REACT_APP_API_URL;
const headers = () => {
  return {
    headers: {
      Authorization: 'Bearer ' + localStorage.getItem('app'),
    },
  };
};

export default class commonServices {
  constructor(http) {
    this.http = http;
  }

  getAudits(model, id) {
    return this.http.get(`${API_URL}/api/${model}/${id}/audits`);
  }

  getCurrentUser() {
    const config = Object.assign(headers(), {});
    return new Promise((resolve) => {
      this.http
        .get(`${API_URL}/me`, config)
        .then((res) => resolve(res.data))
        .catch((err) => err);
    });
  }

  getTopTracks(time_range = MEDIUM_TERM, offset) {
    const config = Object.assign(headers(), {
      params: {
        limit: 50,
        time_range,
        offset,
      },
    });
    return new Promise((resolve) => {
      this.http.get(`${API_URL}/me/top/tracks`, config).then((res) => resolve(res.data));
    });
  }

  createPlaylist(title, owner_id) {
    const config = Object.assign(headers(), {});
    return new Promise((resolve) => {
      this.http
        .post(
          `${API_URL}/users/${owner_id}/playlists`,
          { name: title, description: 'Generated by https://spotitracks.com' },
          config
        )
        .then((res) => resolve(res.data));
    });
  }

  getPlaylist(owner_id, playlist_id, offset) {
    const config = Object.assign(headers(), {
      params: {
        offset,
        limit: 50,
      },
    });
    return new Promise((resolve) => {
      this.http.get(`${API_URL}/users/${owner_id}/playlists/${playlist_id}`, config).then((res) => resolve(res.data));
    });
  }

  followPlaylist(owner_id, playlist_id) {
    const config = Object.assign(headers(), {});
    return new Promise((resolve) => {
      this.http
        .put(`${API_URL}/users/${owner_id}/playlists/${playlist_id}/followers`, {}, config)
        .then((res) => resolve(res.data));
    });
  }

  unfollowPlaylist(owner_id, playlist_id) {
    const config = Object.assign(headers(), {});
    return new Promise((resolve) => {
      this.http
        .delete(`${API_URL}/users/${owner_id}/playlists/${playlist_id}/followers`, config)
        .then((res) => resolve(res));
    });
  }

  saveTracks(user_id, playlist_id, uris) {
    const config = Object.assign(headers(), { data: { uris: uris } });
    return new Promise((resolve) => {
      this.http
        .post(`${API_URL}/users/${user_id}/playlists/${playlist_id}/tracks`, {}, config)
        .then((res) => resolve(res.data));
    });
  }

  getMyPlaylists(offset) {
    const config = Object.assign(headers(), { params: { limit: 50, offset } });
    return this.http.get(`${API_URL}/me/playlists`, config);
  }

  getPlaylistTracks(owner_id, playlist_id, offset) {
    const config = Object.assign(headers(), {
      params: {
        offset,
      },
    });
    return new Promise((resolve) => {
      this.http
        .get(`${API_URL}/users/${owner_id}/playlists/${playlist_id}/tracks`, config)
        .then((res) => resolve(res.data));
    });
  }

  getPlaylistsTracks(list) {
    let playlist = [];
    list.forEach((item) => playlist.push(this.getPlaylist(item.user_id, item.playlist_id)));
    return Promise.all(playlist).then(
      (res) => res,
      (err) => err
    );
  }

  deleteTracks(user_id, playlist_id, tracks) {
    const config = Object.assign(headers(), { data: { tracks } });
    return new Promise((resolve) => {
      this.http
        .delete(`${API_URL}/users/${user_id}/playlists/${playlist_id}/tracks`, config)
        .then((res) => resolve(res.data))
        .catch((err) => err);
    });
  }

  replaceTracks(user_id, playlist_id) {
    const config = Object.assign(headers(), {});
    return new Promise((resolve) => {
      this.http
        .put(`${API_URL}/users/${user_id}/playlists/${playlist_id}/tracks`, {}, config)
        .then((res) => resolve(res.data));
    });
  }

  getArtists(ids) {
    const config = Object.assign(headers(), {
      params: {
        ids,
      },
    });
    return new Promise((resolve) => {
      this.http.get(`${API_URL}/artists`, config).then((res) => resolve(res.data));
    });
  }

  getChart() {
    return new Promise((resolve) => {
      this.http.get(`${process.env.REACT_APP_CHART_URL}/api/charts`, {}).then((res) => resolve(res.data));
    });
  }
}
